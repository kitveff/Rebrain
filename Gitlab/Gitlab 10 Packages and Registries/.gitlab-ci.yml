stages:
  - build_npm
  - build_base_image
  - build_final_image

variables:
  CI_REGISTRY_IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}"
  PACKAGE_NAME: "myapp"
  PACKAGE_VERSION: "1.0.0-${CI_PIPELINE_ID}"

build_npm_package:
  stage: build_npm
  image: node:14
  before_script:
    - echo "@project:registry=https://${CI_SERVER_HOST}/api/v4/packages/npm/">.npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}">>.npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}">>.npmrc
  script:
    - npm install
    - npm pack
    - npm publish
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 hour

build_base_image:
  stage: build_base_image
  image: docker:20.10
  services:
    - docker:20.10-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:base" -f Dockerfile.base .
    - docker push "$CI_REGISTRY_IMAGE:base"

build_final_image:
  stage: build_final_image
  image: docker:20.10
  services:
    - docker:20.10-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    PACKAGE_URL: "${PACKAGE_NAME}@${PACKAGE_VERSION}"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build
      --build-arg PACKAGE_URL="$PACKAGE_URL"
      --build-arg CI_REGISTRY_IMAGE="$CI_REGISTRY_IMAGE"
      -t "$CI_REGISTRY_IMAGE:final"
      .
    - docker push "$CI_REGISTRY_IMAGE:final"